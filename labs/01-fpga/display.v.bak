module display( 
   input wire[9:0] SW,
	output reg[6:0] HEX0,
	output reg[6:0] HEX1,
	output reg[6:0] HEX2
	);
	
 
	reg[3:0] dig0, dig1, dig2;
	
	always@(*) begin
	dig0 = SW[3:0];
	dig1 = SW[7:4];
	dig2 = {2'b00, SW[9:8]}; // se le agregan dos bits para completar el nible
	
		 HEX0 = (dig0 == 4'b0000) ? 7'b1000000 : // 0
              (dig0 == 4'b0001) ? 7'b1111001 : // 1
              (dig0 == 4'b0010) ? 7'b0100100 : // 2
              (dig0 == 4'b0011) ? 7'b0110000 : // 3
              (dig0 == 4'b0100) ? 7'b0011001 : // 4
              (dig0 == 4'b0101) ? 7'b0010010 : // 5
              (dig0 == 4'b0110) ? 7'b0000010 : // 6
              (dig0 == 4'b0111) ? 7'b1111000 : // 7
              (dig0 == 4'b1000) ? 7'b0000000 : // 8
              (dig0 == 4'b1001) ? 7'b0010000 : // 9
              (dig0 == 4'b1010) ? 7'b0001000 : // A
              (dig0 == 4'b1011) ? 7'b0000011 : // B
              (dig0 == 4'b1100) ? 7'b1000110 : // C
              (dig0 == 4'b1101) ? 7'b0100001 : // D
              (dig0 == 4'b1110) ? 7'b0000110 : // E
              (dig0 == 4'b1111) ? 7'b0001110 : // F
                                7'b1111111 ; // Apagado
										  
		 HEX1 = (dig1 == 4'b0000) ? 7'b1000000 : // 0
              (dig1 == 4'b0001) ? 7'b1111001 : // 1
              (dig1 == 4'b0010) ? 7'b0100100 : // 2
              (dig1 == 4'b0011) ? 7'b0110000 : // 3
              (dig1 == 4'b0100) ? 7'b0011001 : // 4
              (dig1 == 4'b0101) ? 7'b0010010 : // 5
              (dig1 == 4'b0110) ? 7'b0000010 : // 6
              (dig1 == 4'b0111) ? 7'b1111000 : // 7
              (dig1 == 4'b1000) ? 7'b0000000 : // 8
              (dig1 == 4'b1001) ? 7'b0010000 : // 9
              (dig1 == 4'b1010) ? 7'b0001000 : // A
              (dig1 == 4'b1011) ? 7'b0000011 : // B
              (dig1 == 4'b1100) ? 7'b1000110 : // C
              (dig1 == 4'b1101) ? 7'b0100001 : // D
              (dig1 == 4'b1110) ? 7'b0000110 : // E
              (dig1 == 4'b1111) ? 7'b0001110 : // F
                                7'b1111111 ; // Apagado
		 HEX2 = (dig2 == 4'b0000) ? 7'b1000000 : // 0
              (dig2 == 4'b0001) ? 7'b1111001 : // 1
              (dig2 == 4'b0010) ? 7'b0100100 : // 2
              (dig2 == 4'b0011) ? 7'b0110000 : // 3
              (dig2 == 4'b0100) ? 7'b0011001 : // 4
              (dig2 == 4'b0101) ? 7'b0010010 : // 5
              (dig2 == 4'b0110) ? 7'b0000010 : // 6
              (dig2 == 4'b0111) ? 7'b1111000 : // 7
              (dig2 == 4'b1000) ? 7'b0000000 : // 8
              (dig2 == 4'b1001) ? 7'b0010000 : // 9
              (dig2 == 4'b1010) ? 7'b0001000 : // A
              (dig2 == 4'b1011) ? 7'b0000011 : // B
              (dig2 == 4'b1100) ? 7'b1000110 : // C
              (dig2 == 4'b1101) ? 7'b0100001 : // D
              (dig2 == 4'b1110) ? 7'b0000110 : // E
              (dig2 == 4'b1111) ? 7'b0001110 : // F
                                7'b1111111 ; // Apagado
	
	end
endmodule